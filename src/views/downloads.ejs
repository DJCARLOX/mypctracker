<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Downloads</title>
    <link rel="icon" type="image/x-icon" href="/img/icon.png">
    <%- include("partials/head") %>
    <style>
        .download-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .download-item h3 {
            margin: 0;
            margin-top: 5%;
        }
        .btn-download {
            margin-left: auto;
        }
        .script-container {
            border: 1px solid #999999;
            padding: 10px;
            margin-top: 15px;
            position: relative;
            max-height: 400px;
            overflow-y: auto;
            background-color: rgb(34, 32, 32);
            color: rgb(255, 255, 90);
        }
        .copy-button {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }
        .copy-button:hover {
            background-color: #0056b3;
        }
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const upcomingLinks = document.querySelectorAll('.btn-upcoming');
            upcomingLinks.forEach(link => {
                link.addEventListener('click', function(event) {
                    event.preventDefault();
                    alert('Próximamente');
                });
            });

            const copyButton = document.getElementById('copy-script-button');
            copyButton.addEventListener('click', function() {
                const scriptContent = document.getElementById('script-content').innerText;
                navigator.clipboard.writeText(scriptContent).then(function() {
                    alert('Script copiado al portapapeles');
                }, function() {
                    alert('Error al copiar el script');
                });
            });
        });
    </script>
</head>
<body>

    <!-- HEADER -->
    <%- include("partials/navigation", { title: "Downloads" }) %>

    <div class="container">
        <h1>Downloads</h1>
        <div class="location-info">
            <div class="download-item">
                <h3>Windows:</h3>
                <a href="/Win_tracker.exe" class="btn btn-primary btn-download" download>Download</a>
            </div>
            <div class="script-container">
                <h4>Script:</h4>
                <button id="copy-script-button" class="copy-button">Copiar</button>
                <pre id="script-content">
cls

# Función para habilitar la configuración de ubicación del sistema
function Enable-LocationServices {
    try {
        # Verificar el estado actual de la configuración de ubicación
        $locationSetting = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location' -Name 'Value'

        if ($locationSetting.Value -ne 'Allow') {
            Write-Host "La configuración de ubicación del sistema no está habilitada. Habilitándola ahora..."

            # Habilitar la configuración de ubicación del sistema
            Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location' -Name 'Value' -Value 'Allow'

            Write-Host "La configuración de ubicación del sistema ha sido habilitada."
        } else {
            Write-Host "La configuración de ubicación del sistema ya está habilitada."
        }

        # Habilitar la configuración de ubicación para el usuario actual
        Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location' -Name 'Value' -Value 'Allow'
        Write-Host "La configuración de ubicación para el usuario actual ha sido habilitada."
    } catch {
        Write-Host "Error al habilitar la configuración de ubicación: $_"
    }
}

Enable-LocationServices

try {
    # Verificar si el ensamblado System.Device está disponible y cargarlo
    try {
        Add-Type -AssemblyName System.Device
    } catch {
        Write-Host "No se pudo cargar el ensamblado System.Device: $_"
        throw "Dependencia faltante: System.Device"
    }

    $correo = Read-Host "Inserte su email de usuario"

    # Función para obtener la ubicación basada en IP
    function Get-IPAddressLocation {
        $IPAddress = (Invoke-RestMethod -Uri 'https://api64.ipify.org?format=json').ip
        $GeoData = (Invoke-RestMethod -Uri "https://ipapi.co/$IPAddress/json/")

        $Location = @{
            IP = $GeoData.ip
            Ciudad = $GeoData.city
            Region = $GeoData.region
            Pais = $GeoData.country_name
        }

        return $Location
    }

    # Función para obtener la ubicación precisa
    function Get-PreciseLocation {
        try {
            # Crear un objeto de GeoCoordinateWatcher
            $geoWatcher = New-Object System.Device.Location.GeoCoordinateWatcher

            # Comenzar la búsqueda de la ubicación
            $geoWatcher.Start()

            # Esperar hasta que la ubicación esté lista o se alcance un tiempo límite
            $maxWait = 10  # Segundos
            $waited = 0
            while (($geoWatcher.Status -eq 'Initializing' -or $geoWatcher.Status -eq 'NoData') -and $waited -lt $maxWait) {
                Start-Sleep -Seconds 1
                $waited += 1
            }

            # Comprobar el estado del geoWatcher
            if ($geoWatcher.Status -eq 'Ready') {
                $coordinate = $geoWatcher.Position.Location

                # Detener el geoWatcher
                $geoWatcher.Stop()

                # Retornar la ubicación precisa
                return @{
                    Latitud = $coordinate.Latitude
                    Longitud = $coordinate.Longitude
                }
            } else {
                throw "No se pudo obtener la ubicación precisa. Asegúrate de que los permisos de ubicación estén habilitados y que tu dispositivo tenga un receptor GPS o capacidad de ubicación basada en Wi-Fi."
            }
        } catch {
            Write-Host "Error al obtener la ubicación precisa: $_"
            return $null
        }
    }

    # OBTENER UBICACION
    $UbicacionIP = Get-IPAddressLocation
    Write-Host "Ubicación IP obtenida: $UbicacionIP"

    $UbicacionPrecisa = Get-PreciseLocation
    if ($UbicacionPrecisa -eq $null) {
        Write-Host "No se pudo obtener la ubicación precisa. Usando solo la ubicación basada en IP."
        $UbicacionPrecisa = @{ Latitud = "No disponible"; Longitud = "No disponible" }
    } else {
        Write-Host "Ubicación precisa obtenida: $UbicacionPrecisa"
    }

    # Combinar ambas ubicaciones en una sola tabla
    $Ubicacion = @{
        IP = $UbicacionIP.IP
        Ciudad = $UbicacionIP.Ciudad
        Region = $UbicacionIP.Region
        Pais = $UbicacionIP.Pais
        Latitud = $UbicacionPrecisa.Latitud
        Longitud = $UbicacionPrecisa.Longitud
    }

    # VER EN CONSOLA
    Write-Host "Ubicación obtenida:"
    $Ubicacion | Format-Table

    # ENVIAR AL SERVICIO WEB
    $WebServiceUrl = "http://localhost:3000/send-notification/"
    $NotificationData = @{
        title     = "Ubicacion del Portatil"
        message   = "Nueva ubicacion disponible."
        deviceId  = "$($env:COMPUTERNAME)"
        ubicacion = $Ubicacion
        userId    = "$correo"
    }

    try {
        $response = Invoke-RestMethod -Uri $WebServiceUrl -Method Post -Body ($NotificationData | ConvertTo-Json) -ContentType 'application/json'
        Write-Host "Respuesta del servidor: $response" -BackgroundColor Green
    } catch {
        Write-Host "Error al enviar la solicitud al servidor. Detalles: $_" -BackgroundColor DarkRed
        $_ | Out-File -FilePath "error_log.txt" -Append
    }

    Write-Host "Ubicación enviada al servicio web:"
    Write-Host "Dispositivo: $($env:COMPUTERNAME)"
    Write-Host "IP: $($Ubicacion.IP)"
    Write-Host "Ciudad: $($Ubicacion.Ciudad)"
    Write-Host "Region: $($Ubicacion.Region)"
    Write-Host "Pais: $($Ubicacion.Pais)"
    Write-Host "Latitud: $($Ubicacion.Latitud)"
    Write-Host "Longitud: $($Ubicacion.Longitud)"

} catch {
    Write-Host "Se ha producido un error: $_" -BackgroundColor Red
    $_ | Out-File -FilePath "error_log.txt" -Append
}
                </pre>
            </div>
            <div class="download-item">
                <h3>Mac OS:</h3>
                <a href="#" class="btn btn-primary btn-download btn-upcoming">Download</a>
            </div>
            <div class="download-item">
                <h3>Linux:</h3>
                <a href="#" class="btn btn-primary btn-download btn-upcoming">Download</a>
            </div>
        </div>
    </div>

    <%- include("partials/footer") %>
</body>
</html>
